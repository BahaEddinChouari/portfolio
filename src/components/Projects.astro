---
import Section from "./Section.astro";
import { Image } from "astro:assets";
import type { ProjectProps } from "@types";

interface Props {
  projects: ProjectProps[];
  title?: string;
  labels?: {
    source?: string;
    details?: string;
    overview?: string;
    tech?: string;
    outcomes?: string;
    close?: string;
  };
}

const { projects, title, labels } = Astro.props as Props;
---

<Section text={title ?? "Featured Projects"} href="projects">
  {
    projects.map(({ name, summary, image, linkSource, details, tech, outcomes }, index) => {
      const top = 98 + index * 40;
      return (
        <div
          style={`top: ${top}px;`}
          class="sticky mb-12 rounded-2xl border border-neutral/20 bg-black"
        >
          <div class="bg-difu relative z-[1] grid h-[580px] w-full grid-rows-2 rounded-2xl bg-[#1c232d]/85 before:absolute before:inset-0 before:z-[-1] before:rounded-2xl before:bg-[url(/raja.png)] before:bg-[length:128px] before:bg-repeat before:opacity-[5%] before:content-[''] sm:grid-cols-2 sm:grid-rows-1 md:h-96">
            <div class="px-6 pt-12">
              <button 
                class="mb-5 text-left font-serif text-3xl font-medium text-primary hover:underline"
                aria-haspopup="dialog"
                onclick={`window.showProjectModal(${index})`}
              >
                {name}
              </button>
              <p class="text-base text-neutral">{summary}</p>
              <div class="flex gap-5 pt-10 text-white">
                <a
                  href={linkSource}
                  target="_blank"
                  class="after:relative after:bottom-[-5px] after:content-[url(/external.svg)] hover:underline"
                >
                  {labels?.source ?? "Source"}
                </a>
                <button
                  class="hover:underline after:relative after:bottom-[-5px] after:content-[url(/external.svg)]"
                  onclick={`window.showProjectModal(${index})`}
                >
                  {labels?.details ?? "Details"}
                </button>
              </div>
            </div>
            <div class="flex items-center justify-center overflow-hidden h-full">
              <Image
                class="h-full w-full rounded-ss-xl rounded-ee-2xl object-contain object-center sm:h-full sm:w-full"
                src={image}
                alt={name}
                width="736"
                height="483"
              />
            </div>
          </div>
          {/* Hidden rich content for modal cloning */}
          <div id={`proj-content-${index}`} class="hidden">
            <div class="p-1">
              <div class="flex items-start justify-between gap-6">
                <h3 class="font-serif text-2xl font-medium text-primary">{name}</h3>
                <button class="rounded-md border border-neutral/30 px-3 py-1 text-sm text-neutral hover:border-neutral/50 hover:text-white" onclick="window.closeProjectModal()">{labels?.close ?? "Close"}</button>
              </div>
              <p class="mt-3 text-neutral">{summary}</p>
              {details && (
                <div class="mt-6">
                  <h4 class="mb-2 text-lg font-medium">{labels?.overview ?? "Overview"}</h4>
                  <ul class="list-disc space-y-2 pl-6 text-neutral">
                    {(Array.isArray(details) ? details : [details]).map((d) => (
                      <li>{d}</li>
                    ))}
                  </ul>
                </div>
              )}
              {tech && tech.length > 0 && (
                <div class="mt-6">
                  <h4 class="mb-2 text-lg font-medium">{labels?.tech ?? "Tech"}</h4>
                  <div class="flex flex-wrap gap-2">
                    {tech.map((t) => (
                      <span class="rounded-full border border-neutral/20 px-3 py-1 text-sm text-neutral">{t}</span>
                    ))}
                  </div>
                </div>
              )}
              {outcomes && outcomes.length > 0 && (
                <div class="mt-6">
                  <h4 class="mb-2 text-lg font-medium">{labels?.outcomes ?? "Outcomes"}</h4>
                  <ul class="list-disc space-y-2 pl-6 text-neutral">
                    {outcomes.map((o) => (
                      <li>{o}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    })
  }
</Section>

{/* Global modal overlay */}
<div id="project-modal" class="fixed inset-0 z-[60] hidden">
  <div class="absolute inset-0 bg-black/60 backdrop-blur-sm" onclick="window.closeProjectModal()"></div>
  <div class="relative mx-auto my-12 w-[92%] max-w-3xl scale-95 opacity-0 transition-all duration-200">
    <div class="rounded-2xl border border-neutral/20 bg-[#0b0f14] p-6 text-white shadow-2xl" id="project-modal-panel"></div>
  </div>
  <button aria-label="Close" class="absolute right-5 top-5 rounded-md border border-neutral/30 bg-black/40 px-3 py-1 text-sm text-neutral hover:border-neutral/50 hover:text-white" onclick="window.closeProjectModal()">Esc</button>
  <span class="sr-only" role="status" aria-live="polite" id="project-modal-status"></span>
  <style>
    .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
  </style>
  <script>
    // @ts-nocheck
    (function(){
      let lastFocus = null;
      const overlay = document.getElementById('project-modal');
      const panel = document.getElementById('project-modal-panel');
      const status = document.getElementById('project-modal-status');

      function trapFocus(e){
        if (overlay && !overlay.classList.contains('hidden') && !overlay.contains(e.target)){
          e.stopPropagation();
          panel.focus();
        }
      }

      // @ts-ignore
      window.showProjectModal = (i) => {
        const source = document.getElementById(`proj-content-${i}`);
        if (!source) return;
        lastFocus = document.activeElement;
        if (!panel || !overlay) return;
        panel.innerHTML = source.innerHTML;
        overlay.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        requestAnimationFrame(() => {
          const container = overlay.querySelector('.relative.mx-auto');
          if (container) {
            container.classList.remove('scale-95','opacity-0');
            container.classList.add('scale-100','opacity-100');
          }
          panel.setAttribute('tabindex','-1');
          panel.focus({preventScroll:true});
          if (status) status.textContent = 'Dialog opened';
        });
        document.addEventListener('focus', trapFocus, true);
      };

      // @ts-ignore
      window.closeProjectModal = () => {
        if (!overlay || !panel) return;
        const container = overlay.querySelector('.relative.mx-auto');
        if (container) container.classList.add('scale-95','opacity-0');
        setTimeout(() => {
          overlay.classList.add('hidden');
          panel.innerHTML = '';
          document.body.style.overflow = '';
          if (lastFocus && typeof lastFocus.focus === 'function') lastFocus.focus();
          if (status) status.textContent = 'Dialog closed';
        }, 160);
        document.removeEventListener('focus', trapFocus, true);
      };

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !overlay.classList.contains('hidden')) {
          e.preventDefault();
          window.closeProjectModal();
        }
      });
    })();
  </script>
</div>
</Section>
